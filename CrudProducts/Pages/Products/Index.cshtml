@page "/Products/Index"
@model CrudProducts.Pages.Products.IndexModel

@{
    ViewData["Title"] = "Index";
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Home</title>
    <link rel="stylesheet" href="~/css/styleFiltre.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

</head>

<body>

    <h1>Bienvenue sur notre collection de produit</h1>

    <button class="create-button" asp-page="Create">
        <a class="create-button" asp-page="Create">
            <i class="fas fa-plus"></i> Create New
        </a>
    </button>
    <form>
        <div class="form-row">
            <div class="form-group">
                <label for="prd">Nom du produit</label>
                <input type="text" id="prd" name="prd" asp-for="prd" />
            </div>

            <div class="form-group">
                <label for="minPrice">Prix supérieur</label>
                <input type="number" id="minPrice" name="minPrice" asp-for="minPrice" />
            </div>

            <div class="form-group">
                <label for="maxPrice">Prix inférieur</label>
                <input type="number" id="maxPrice" name="maxPrice" asp-for="maxPrice" />
            </div>
            <div class="form-group">
                <label for="selectedCategory">Catégorie</label>
                <select id="selectedCategory" name="selectedCategory" asp-for="selectedCategory" class="form-control">
                    <option value="">Toutes les catégories</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.Id.ToString()">@category.Name</option>
                    }
                </select>

</div>


            <div class="form-group">
                <input type="submit" value="Filtrer" />
            </div>
        </div>
    </form>


    <div class="card-columns">
        @if (Model.Product != null && Model.Product.Any())
        {
            foreach (var item in Model.Product)
            {
                <div class="card custom-card">
                    <img src="@item.imageUrl" class="card-img img-fluid" alt="Product Image">
                    <div class="card-body">
                        <h5 class="card-title">@item.Name</h5>
                        <p class="card-text">@item.Description</p>
                        <p class="card-text">Price: @item.Price</p>
                        <button class="btn btn-success addToCartBtn" data-product-id="@item.Id" data-product-price="@item.Price" data-product-name="@item.Name">Add to Cart</button>
                    </div>
                    <div class="card-footer">
                        <small class="text-muted">
                            <a asp-page="./Edit" asp-route-id="@item.Id" class="btn btn-primary">Edit</a>
                            <a asp-page="./Details" asp-route-id="@item.Id" class="btn btn-info">Details</a>
                            <a asp-page="./Delete" asp-route-id="@item.Id" class="btn btn-danger">Delete</a>
                        </small>
                    </div>
                </div>
            }
        }
        else
        {
            <p>Aucun résultat trouvé.</p>
        }
    </div>






</body>

</html>


@section Scripts
    {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Sélectionnez tous les boutons "Add to Cart"
            const addToCartButtons = document.querySelectorAll('.addToCartBtn');

            // Ajoutez un gestionnaire d'événements pour chaque bouton
            addToCartButtons.forEach(button => {
                button.addEventListener('click', function () {
                    // Récupérez l'ID du produit à partir de l'attribut data
                    const productId = this.getAttribute('data-product-id');
                    const productName = button.dataset.productName;
                    const productPrice = button.dataset.productPrice;
                    

                    // Ajoutez le produit au panier en utilisant Local Storage
                    addToCart(productId, productName, productPrice);
                });
            });

            // Fonction pour ajouter au panier
            function addToCart(productId, productName, productPrice) {
                // Obtenez le panier actuel depuis Local Storage (s'il y en a un)
                const cart = JSON.parse(localStorage.getItem('cart')) || [];

                const existingProduct = cart.find(item => item.productId === productId);
                if (existingProduct) {
                    alert('Product is already in the cart!');
                } else {
                    cart.push({ productId: productId, productName: productName , productPrice: productPrice,quantity: 1 });

                    // Enregistrez le panier mis à jour dans Local Storage
                    localStorage.setItem('cart', JSON.stringify(cart));

                    updateCartCount();

                    alert('Product added to cart!');
                }



            }
        });
    </script>
}

