@page "/ShoppingCart/Cart"
@inject CrudProducts.Data.CrudProductsContext Context
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using System.Text.Json;
@using CrudProducts.Model
@{
  
}

<h1>Shopping Cart</h1>
<table class="table" id="cartTable">
    <thead>
        <tr>
            <th>Product ID</th>
            <th>Product Name</th>
            <th>Quantity</th>
            <th>Subtotal</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody id="cartBody">
    </tbody>
</table>

@section Scripts
    {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Récupérer le panier depuis Local Storage
            const cartItems = JSON.parse(localStorage.getItem('cart')) || [];
            console.log(cartItems); 

            // Sélectionner l'élément tbody du tableau
            const cartBody = document.getElementById('cartBody');

            // Parcourir chaque élément dans le panier
            cartItems.forEach(item => {
                // Créer une ligne pour chaque élément
                const row = document.createElement('tr');
                const price = parseFloat(item.productPrice);
                const quantity = parseInt(item.quantity);

                // Ajouter les colonnes avec les données de l'élément
                row.innerHTML = `
                            <td>${item.productId}</td>
                            <td>${item.productName}</td>
                            <td><input type="number" min="1" max="100" step="1" value="${item.quantity}" />
                            </td>
                                    <td>${(price * quantity).toFixed(2)}</td>
                            <td>
                                        <button class="updateBtn" data-product-id="${item.productId}">Update</button>
                                        <button class="deleteBtn" data-product-id="${item.productId}">Delete</button>
                            </td>
                        `;

                // Ajouter la ligne à tbody
                cartBody.appendChild(row);


                const updateBtn = row.querySelector('.updateBtn');
                updateBtn.addEventListener('click', function () {
                    const productId = this.getAttribute('data-product-id');
                    const quantityInput = row.querySelector('input[type="number"]');

                    // Récupérez la valeur de l'élément input
                    const updatedQuantity = parseInt(quantityInput.value);

                    // Mettre à jour la quantité dans le panier
                    updateCartItem(productId, updatedQuantity);
                });

                // Gestionnaire d'événement pour le bouton Delete
                const deleteBtn = row.querySelector('.deleteBtn');
                deleteBtn.addEventListener('click', function () {
                    const productId = this.getAttribute('data-product-id');

                    // Supprimer l'élément du panier
                    deleteCartItem(productId);
                });
            });
        });

        // Fonction pour mettre à jour la quantité dans le panier
        function updateCartItem(productId, newQuantity) {
            // Obtenir le panier actuel depuis Local Storage
            const cart = JSON.parse(localStorage.getItem('cart')) || [];

            // Trouver l'élément dans le panier
            const cartItem = cart.find(item => item.productId === productId);

            if (cartItem) {
                // Mettre à jour la quantité
                cartItem.quantity = newQuantity;

                // Enregistrer le panier mis à jour dans Local Storage
                localStorage.setItem('cart', JSON.stringify(cart));

                alert('Quantity has been updated!');

            }
        }

        // Fonction pour supprimer un élément du panier
        function deleteCartItem(productId) {
            // Obtenir le panier actuel depuis Local Storage
            const cart = JSON.parse(localStorage.getItem('cart')) || [];

            // Filtrer les éléments du panier pour exclure celui à supprimer
            const updatedCart = cart.filter(item => item.productId !== productId);

            // Enregistrer le panier mis à jour dans Local Storage
            localStorage.setItem('cart', JSON.stringify(updatedCart));

            // Mettre à jour l'affichage
            updateCartDisplay(updatedCart);
            updateCartCount();

            alert('Product has been deleted!');
        }

        // Fonction pour mettre à jour l'affichage du panier
        function updateCartDisplay(cart) {
            // Réinitialiser le corps du panier
            cartBody.innerHTML = '';

            // Parcourir chaque élément dans le panier
            cart.forEach(item => {
                // Créer une ligne pour chaque élément
                const row = document.createElement('tr');

                // ... (reprendre le code pour ajouter les colonnes)

                // Ajouter la ligne à tbody
                cartBody.appendChild(row);
            });
        }
    </script>
}

